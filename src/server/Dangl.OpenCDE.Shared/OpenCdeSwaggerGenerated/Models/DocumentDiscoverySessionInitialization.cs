/*
 * OpenCDE Documents API
 *
 * OpenCDE Documents API Specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Converters;

namespace Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentDiscoverySessionInitialization : IEquatable<DocumentDiscoverySessionInitialization>
    {
        /// <summary>
        /// A CDE UI URL for the client to open in a local browser. The user would search and select documents directly in the CDE
        /// </summary>
        /// <value>A CDE UI URL for the client to open in a local browser. The user would search and select documents directly in the CDE</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="select_documents_url", EmitDefaultValue=false)]
        public string SelectDocumentsUrl { get; set; }

        /// <summary>
        /// &#x60;select_documents_url&#x60; expiry in seconds
        /// </summary>
        /// <value>&#x60;select_documents_url&#x60; expiry in seconds</value>
        [Required]
        [DataMember(Name="expires_in", EmitDefaultValue=true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDiscoverySessionInitialization {\n");
            sb.Append("  SelectDocumentsUrl: ").Append(SelectDocumentsUrl).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentDiscoverySessionInitialization)obj);
        }

        /// <summary>
        /// Returns true if DocumentDiscoverySessionInitialization instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentDiscoverySessionInitialization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDiscoverySessionInitialization other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SelectDocumentsUrl == other.SelectDocumentsUrl ||
                    SelectDocumentsUrl != null &&
                    SelectDocumentsUrl.Equals(other.SelectDocumentsUrl)
                ) && 
                (
                    ExpiresIn == other.ExpiresIn ||
                    
                    ExpiresIn.Equals(other.ExpiresIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SelectDocumentsUrl != null)
                    hashCode = hashCode * 59 + SelectDocumentsUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExpiresIn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentDiscoverySessionInitialization left, DocumentDiscoverySessionInitialization right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentDiscoverySessionInitialization left, DocumentDiscoverySessionInitialization right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
