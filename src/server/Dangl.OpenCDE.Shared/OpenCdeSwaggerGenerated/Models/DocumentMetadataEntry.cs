/*
 * OpenCDE Documents API
 *
 * OpenCDE Documents API Specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Converters;

namespace Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Models
{ 
    /// <summary>
    /// A single document metadata property - a key-value pair
    /// </summary>
    [DataContract]
    public partial class DocumentMetadataEntry : IEquatable<DocumentMetadataEntry>
    {
        /// <summary>
        /// The name of the metadata property
        /// </summary>
        /// <value>The name of the metadata property</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The value of the metadata property, can be a list
        /// </summary>
        /// <value>The value of the metadata property, can be a list</value>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=false)]
        public List<string> Value { get; set; }


        /// <summary>
        /// The data type of the items in the value array
        /// </summary>
        /// <value>The data type of the items in the value array</value>
        [TypeConverter(typeof(CustomEnumConverter<DataTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DataTypeEnum
        {
            
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 1,
            
            /// <summary>
            /// Enum BooleanEnum for boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            BooleanEnum = 2,
            
            /// <summary>
            /// Enum DateTimeEnum for date-time
            /// </summary>
            [EnumMember(Value = "date-time")]
            DateTimeEnum = 3,
            
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 4,
            
            /// <summary>
            /// Enum Integer32Enum for integer32
            /// </summary>
            [EnumMember(Value = "integer32")]
            Integer32Enum = 5,
            
            /// <summary>
            /// Enum Integer64Enum for integer64
            /// </summary>
            [EnumMember(Value = "integer64")]
            Integer64Enum = 6,
            
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 7,
            
            /// <summary>
            /// Enum UrlEnum for url
            /// </summary>
            [EnumMember(Value = "url")]
            UrlEnum = 8
        }

        /// <summary>
        /// The data type of the items in the value array
        /// </summary>
        /// <value>The data type of the items in the value array</value>
        [Required]
        [DataMember(Name="data_type", EmitDefaultValue=true)]
        public DataTypeEnum DataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentMetadataEntry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentMetadataEntry)obj);
        }

        /// <summary>
        /// Returns true if DocumentMetadataEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentMetadataEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentMetadataEntry other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    other.Value != null &&
                    Value.SequenceEqual(other.Value)
                ) && 
                (
                    DataType == other.DataType ||
                    
                    DataType.Equals(other.DataType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    
                    hashCode = hashCode * 59 + DataType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentMetadataEntry left, DocumentMetadataEntry right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentMetadataEntry left, DocumentMetadataEntry right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
