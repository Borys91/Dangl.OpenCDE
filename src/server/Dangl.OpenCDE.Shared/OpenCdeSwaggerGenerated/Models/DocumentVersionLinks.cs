/*
 * OpenCDE Documents API
 *
 * OpenCDE Documents API Specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Converters;

namespace Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Models
{ 
    /// <summary>
    /// * __document_version__ is a self-URL that can be used for future retrieval of the document version information * __document_version_metadata__ is a URL for retrieving the metadata associated with this document version * __document_version_download__ is a URL for downloading the file backing this document version * __document_versions__ is a URL for retrieving all the versions of the document * __document_details__ is a URL that should be opened in the system browser. It leads to a page on the CDE where users can view or edit document details 
    /// </summary>
    [DataContract]
    public partial class DocumentVersionLinks : IEquatable<DocumentVersionLinks>
    {
        /// <summary>
        /// Gets or Sets DocumentVersion
        /// </summary>
        [Required]
        [DataMember(Name="document_version", EmitDefaultValue=false)]
        public LinkData DocumentVersion { get; set; }

        /// <summary>
        /// Gets or Sets DocumentVersionMetadata
        /// </summary>
        [Required]
        [DataMember(Name="document_version_metadata", EmitDefaultValue=false)]
        public LinkData DocumentVersionMetadata { get; set; }

        /// <summary>
        /// Gets or Sets DocumentVersionDownload
        /// </summary>
        [Required]
        [DataMember(Name="document_version_download", EmitDefaultValue=false)]
        public LinkData DocumentVersionDownload { get; set; }

        /// <summary>
        /// Gets or Sets DocumentVersions
        /// </summary>
        [Required]
        [DataMember(Name="document_versions", EmitDefaultValue=false)]
        public LinkData DocumentVersions { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDetails
        /// </summary>
        [DataMember(Name="document_details", EmitDefaultValue=false)]
        public LinkData DocumentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentVersionLinks {\n");
            sb.Append("  DocumentVersion: ").Append(DocumentVersion).Append("\n");
            sb.Append("  DocumentVersionMetadata: ").Append(DocumentVersionMetadata).Append("\n");
            sb.Append("  DocumentVersionDownload: ").Append(DocumentVersionDownload).Append("\n");
            sb.Append("  DocumentVersions: ").Append(DocumentVersions).Append("\n");
            sb.Append("  DocumentDetails: ").Append(DocumentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentVersionLinks)obj);
        }

        /// <summary>
        /// Returns true if DocumentVersionLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentVersionLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentVersionLinks other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocumentVersion == other.DocumentVersion ||
                    DocumentVersion != null &&
                    DocumentVersion.Equals(other.DocumentVersion)
                ) && 
                (
                    DocumentVersionMetadata == other.DocumentVersionMetadata ||
                    DocumentVersionMetadata != null &&
                    DocumentVersionMetadata.Equals(other.DocumentVersionMetadata)
                ) && 
                (
                    DocumentVersionDownload == other.DocumentVersionDownload ||
                    DocumentVersionDownload != null &&
                    DocumentVersionDownload.Equals(other.DocumentVersionDownload)
                ) && 
                (
                    DocumentVersions == other.DocumentVersions ||
                    DocumentVersions != null &&
                    DocumentVersions.Equals(other.DocumentVersions)
                ) && 
                (
                    DocumentDetails == other.DocumentDetails ||
                    DocumentDetails != null &&
                    DocumentDetails.Equals(other.DocumentDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocumentVersion != null)
                    hashCode = hashCode * 59 + DocumentVersion.GetHashCode();
                    if (DocumentVersionMetadata != null)
                    hashCode = hashCode * 59 + DocumentVersionMetadata.GetHashCode();
                    if (DocumentVersionDownload != null)
                    hashCode = hashCode * 59 + DocumentVersionDownload.GetHashCode();
                    if (DocumentVersions != null)
                    hashCode = hashCode * 59 + DocumentVersions.GetHashCode();
                    if (DocumentDetails != null)
                    hashCode = hashCode * 59 + DocumentDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentVersionLinks left, DocumentVersionLinks right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentVersionLinks left, DocumentVersionLinks right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
