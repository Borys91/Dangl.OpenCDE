/*
 * OpenCDE Documents API
 *
 * OpenCDE Documents API Specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Converters;

namespace Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SelectDocuments : IEquatable<SelectDocuments>
    {
        /// <summary>
        /// Gets or Sets Callback
        /// </summary>
        [Required]
        [DataMember(Name="callback", EmitDefaultValue=false)]
        public CallbackLink Callback { get; set; }

        /// <summary>
        /// A CDE controlled identifier recording the user&#39;s context on the CDE. For example which project and folder the user was on. If the client provides the &#x60;server_context&#x60; in subsequent calls then the CDE will attemp to load the UI at the same place.
        /// </summary>
        /// <value>A CDE controlled identifier recording the user&#39;s context on the CDE. For example which project and folder the user was on. If the client provides the &#x60;server_context&#x60; in subsequent calls then the CDE will attemp to load the UI at the same place.</value>
        [DataMember(Name="server_context", EmitDefaultValue=true)]
        public string ServerContext { get; set; }

        /// <summary>
        /// The client may optionally provide an array of accepted file extensions that should be opened during this flow. The CDE server UI should make an attempt to only show files matching these extensions to the user for the download selection or help the user in selecting the desired files. However, the server does not have to guarantee that only files matching the extensions will be selected. The extensions here must contain the dot separator.
        /// </summary>
        /// <value>The client may optionally provide an array of accepted file extensions that should be opened during this flow. The CDE server UI should make an attempt to only show files matching these extensions to the user for the download selection or help the user in selecting the desired files. However, the server does not have to guarantee that only files matching the extensions will be selected. The extensions here must contain the dot separator.</value>
        [DataMember(Name="supported_file_extensions", EmitDefaultValue=false)]
        public List<string> SupportedFileExtensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelectDocuments {\n");
            sb.Append("  Callback: ").Append(Callback).Append("\n");
            sb.Append("  ServerContext: ").Append(ServerContext).Append("\n");
            sb.Append("  SupportedFileExtensions: ").Append(SupportedFileExtensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SelectDocuments)obj);
        }

        /// <summary>
        /// Returns true if SelectDocuments instances are equal
        /// </summary>
        /// <param name="other">Instance of SelectDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelectDocuments other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Callback == other.Callback ||
                    Callback != null &&
                    Callback.Equals(other.Callback)
                ) && 
                (
                    ServerContext == other.ServerContext ||
                    ServerContext != null &&
                    ServerContext.Equals(other.ServerContext)
                ) && 
                (
                    SupportedFileExtensions == other.SupportedFileExtensions ||
                    SupportedFileExtensions != null &&
                    other.SupportedFileExtensions != null &&
                    SupportedFileExtensions.SequenceEqual(other.SupportedFileExtensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Callback != null)
                    hashCode = hashCode * 59 + Callback.GetHashCode();
                    if (ServerContext != null)
                    hashCode = hashCode * 59 + ServerContext.GetHashCode();
                    if (SupportedFileExtensions != null)
                    hashCode = hashCode * 59 + SupportedFileExtensions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SelectDocuments left, SelectDocuments right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SelectDocuments left, SelectDocuments right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
